> embed_methods <- c("Isomap", "PCA", "tSNE", "UMAP", "kPCA", "LLE", "MDS")
> ## load test data set
> data(BostonHousing)
> df <- data.frame(matrix(unlist(BostonHousing), nrow=dim(BostonHousing)[1], byrow=FALSE))
> data_set <- dimRedData(df)
> 
> ## apply dimensionality reduction
> data_emb <- lapply(embed_methods, function(x) embed(data_set, x))
2019-12-06 16:41:17: Isomap START
2019-12-06 16:41:17: constructing knn graph
2019-12-06 16:41:17: calculating geodesic distances
2019-12-06 16:41:18: Classical Scaling
2019-12-06 16:41:19: Calculating kernel PCA
2019-12-06 16:41:19: Trying to calculate reverse
2019-12-06 16:41:19: DONE
finding neighbours
calculating weights
computing coordinates
> names(data_emb) <- embed_methods
> ## figure \ref{fig:plotexample}a, the data set
> # plot(data_set, type = "3vars")
> ## figures \ref{fig:plotexample}b (Isomap) and \ref{fig:plotexample}d (PCA)
> # lapply(data_emb, plot, type = "2vars")
> ## figure \ref{fig:plotexample}c, quality analysis
> plot_R_NX(data_emb)
Warning messages:
1: In rankmatrix(X, input = "dist", use) :
  0 outside of diagonal in distance matrix
2: Removed 102 rows containing missing values (geom_path). 
> embed_methods <- c("Isomap", "PCA", "tSNE", "UMAP", "kPCA", "LLE", "MDS")
> ## load test data set
> data(wine)
> df <- data.frame(matrix(unlist(wine), ncol = 14, byrow = FALSE))
> data_set <- dimRedData(df)
> 
> ## apply dimensionality reduction
> data_emb <- lapply(embed_methods, function(x) embed(data_set, x))
2019-12-06 16:43:01: Isomap START
2019-12-06 16:43:01: constructing knn graph
2019-12-06 16:43:01: calculating geodesic distances
2019-12-06 16:43:01: Classical Scaling
2019-12-06 16:43:02: Calculating kernel PCA
2019-12-06 16:43:02: Trying to calculate reverse
2019-12-06 16:43:02: DONE
finding neighbours
calculating weights
computing coordinates
> names(data_emb) <- embed_methods
> ## figure \ref{fig:plotexample}a, the data set
> # plot(data_set, type = "3vars")
> ## figures \ref{fig:plotexample}b (Isomap) and \ref{fig:plotexample}d (PCA)
> # lapply(data_emb, plot, type = "2vars")
> ## figure \ref{fig:plotexample}c, quality analysis
> plot_R_NX(data_emb)
Warning messages:
1: In rankmatrix(X, input = "dist", use) :
  0 outside of diagonal in distance matrix
2: Removed 49 rows containing missing values (geom_path). 
> embed_methods <- c("Isomap", "PCA", "tSNE", "UMAP", "kPCA", "LLE", "MDS")
> ## load test data set
> data(wine)
> df <- data.frame(matrix(unlist(wine), ncol = 14, byrow = FALSE))
> data_set <- dimRedData(df)
> 
> ## apply dimensionality reduction
> data_emb <- lapply(embed_methods, function(x) embed(data_set, x))
2019-12-06 16:43:24: Isomap START
2019-12-06 16:43:24: constructing knn graph
2019-12-06 16:43:24: calculating geodesic distances
2019-12-06 16:43:24: Classical Scaling
2019-12-06 16:43:25: Calculating kernel PCA
2019-12-06 16:43:25: Trying to calculate reverse
2019-12-06 16:43:25: DONE
finding neighbours
calculating weights
computing coordinates
> names(data_emb) <- embed_methods
> ## figure \ref{fig:plotexample}a, the data set
> # plot(data_set, type = "3vars")
> ## figures \ref{fig:plotexample}b (Isomap) and \ref{fig:plotexample}d (PCA)
> # lapply(data_emb, plot, type = "2vars")
> ## figure \ref{fig:plotexample}c, quality analysis
> plot_R_NX(data_emb)
Warning messages:
1: In rankmatrix(X, input = "dist", use) :
  0 outside of diagonal in distance matrix
2: Removed 39 rows containing missing values (geom_path). 
> 
> 
> 
> embed_methods <- c("Isomap", "PCA", "tSNE", "UMAP", "kPCA", "LLE", "MDS")
> ## load test data set
> data_set <- loadDataSet("3D S Curve", n = 1000)
> ## apply dimensionality reduction
> data_emb <- lapply(embed_methods, function(x) embed(data_set, x))
2019-12-06 17:12:23: Isomap START
2019-12-06 17:12:24: constructing knn graph
2019-12-06 17:12:24: calculating geodesic distances
2019-12-06 17:12:25: Classical Scaling
2019-12-06 17:12:28: Calculating kernel PCA
2019-12-06 17:12:31: Trying to calculate reverse
2019-12-06 17:12:31: DONE
finding neighbours
calculating weights
computing coordinates
> names(data_emb) <- embed_methods
> ## figure \ref{fig:plotexample}a, the data set
> plot(data_set, type = "3vars")
> 
> 
> 
> 
> embed_methods <- c("Isomap", "PCA", "tSNE", "UMAP", "kPCA", "LLE", "MDS")
> ## load test data set
> data_set <- loadDataSet("3D S Curve", n = 1000)
> ## apply dimensionality reduction
> data_emb <- lapply(embed_methods, function(x) embed(data_set, x))
2019-12-06 17:13:19: Isomap START
2019-12-06 17:13:19: constructing knn graph
2019-12-06 17:13:19: calculating geodesic distances
2019-12-06 17:13:20: Classical Scaling
2019-12-06 17:13:23: Calculating kernel PCA
2019-12-06 17:13:24: Trying to calculate reverse
2019-12-06 17:13:24: DONE
finding neighbours
calculating weights
computing coordinates
> names(data_emb) <- embed_methods
> ## figure \ref{fig:plotexample}a, the data set
> # plot(data_set, type = "3vars")
> ## figures \ref{fig:plotexample}b (Isomap) and \ref{fig:plotexample}d (PCA)
> lapply(data_emb, plot, type = "2vars")
$Isomap
NULL

$PCA
NULL

$tSNE
NULL

$UMAP
NULL

$kPCA
NULL

$LLE
NULL

$MDS
NULL

> ## figure \ref{fig:plotexample}c, quality analysis
> # plot_R_NX(data_emb)
> source("/Users/kaustubh/Documents/Data Science/Project/final/bar1.R")
2019-12-06 17:36:54: Isomap START
2019-12-06 17:36:54: constructing knn graph
2019-12-06 17:36:54: calculating geodesic distances
2019-12-06 17:36:54: Classical Scaling
2019-12-06 17:36:54: Isomap START
2019-12-06 17:36:54: constructing knn graph
2019-12-06 17:36:54: calculating geodesic distances
2019-12-06 17:36:54: Classical Scaling
2019-12-06 17:36:54: Isomap START
2019-12-06 17:36:54: constructing knn graph
2019-12-06 17:36:54: calculating geodesic distances
2019-12-06 17:36:54: Classical Scaling
2019-12-06 17:36:54: Isomap START
2019-12-06 17:36:54: constructing knn graph
2019-12-06 17:36:54: calculating geodesic distances
2019-12-06 17:36:55: Classical Scaling
2019-12-06 17:36:55: Isomap START
2019-12-06 17:36:55: constructing knn graph
2019-12-06 17:36:55: calculating geodesic distances
2019-12-06 17:36:55: Classical Scaling
2019-12-06 17:36:55: Isomap START
2019-12-06 17:36:55: constructing knn graph
2019-12-06 17:36:55: calculating geodesic distances
2019-12-06 17:36:55: Classical Scaling
2019-12-06 17:36:55: Isomap START
2019-12-06 17:36:55: constructing knn graph
2019-12-06 17:36:55: calculating geodesic distances
2019-12-06 17:36:55: Classical Scaling
2019-12-06 17:36:55: Isomap START
2019-12-06 17:36:55: constructing knn graph
2019-12-06 17:36:56: calculating geodesic distances
2019-12-06 17:36:56: Classical Scaling
2019-12-06 17:36:56: Isomap START
2019-12-06 17:36:56: constructing knn graph
2019-12-06 17:36:56: calculating geodesic distances
2019-12-06 17:36:56: Classical Scaling
2019-12-06 17:36:56: Isomap START
2019-12-06 17:36:56: constructing knn graph
2019-12-06 17:36:56: calculating geodesic distances
2019-12-06 17:36:56: Classical Scaling
2019-12-06 17:36:56: Isomap START
2019-12-06 17:36:56: constructing knn graph
2019-12-06 17:36:56: calculating geodesic distances
2019-12-06 17:36:56: Classical Scaling
2019-12-06 17:36:56: Isomap START
2019-12-06 17:36:56: constructing knn graph
2019-12-06 17:36:56: calculating geodesic distances
2019-12-06 17:36:56: Classical Scaling
2019-12-06 17:36:56: Isomap START
2019-12-06 17:36:56: constructing knn graph
2019-12-06 17:36:56: calculating geodesic distances
2019-12-06 17:36:57: Classical Scaling
2019-12-06 17:36:57: Isomap START
2019-12-06 17:36:57: constructing knn graph
2019-12-06 17:36:57: calculating geodesic distances
2019-12-06 17:36:57: Classical Scaling
2019-12-06 17:36:57: Isomap START
2019-12-06 17:36:57: constructing knn graph
2019-12-06 17:36:57: calculating geodesic distances
2019-12-06 17:36:57: Classical Scaling
2019-12-06 17:36:57: Isomap START
2019-12-06 17:36:57: constructing knn graph
2019-12-06 17:36:57: calculating geodesic distances
2019-12-06 17:36:57: Classical Scaling
2019-12-06 17:36:57: Isomap START
2019-12-06 17:36:57: constructing knn graph
2019-12-06 17:36:57: calculating geodesic distances
2019-12-06 17:36:57: Classical Scaling
2019-12-06 17:36:57: Isomap START
2019-12-06 17:36:57: constructing knn graph
2019-12-06 17:36:57: calculating geodesic distances
2019-12-06 17:36:58: Classical Scaling
2019-12-06 17:36:58: Isomap START
2019-12-06 17:36:58: constructing knn graph
2019-12-06 17:36:58: calculating geodesic distances
2019-12-06 17:36:58: Classical Scaling
2019-12-06 17:36:58: Isomap START
2019-12-06 17:36:58: constructing knn graph
2019-12-06 17:36:58: calculating geodesic distances
2019-12-06 17:36:58: Classical Scaling
2019-12-06 17:36:58: Isomap START
2019-12-06 17:36:58: constructing knn graph
2019-12-06 17:36:58: calculating geodesic distances
2019-12-06 17:36:58: Classical Scaling
2019-12-06 17:36:58: Isomap START
2019-12-06 17:36:58: constructing knn graph
2019-12-06 17:36:59: calculating geodesic distances
2019-12-06 17:36:59: Classical Scaling
2019-12-06 17:36:59: Isomap START
2019-12-06 17:36:59: constructing knn graph
2019-12-06 17:36:59: calculating geodesic distances
2019-12-06 17:37:00: Classical Scaling
2019-12-06 17:37:00: Isomap START
2019-12-06 17:37:00: constructing knn graph
2019-12-06 17:37:00: calculating geodesic distances
2019-12-06 17:37:00: Classical Scaling
2019-12-06 17:37:00: Isomap START
2019-12-06 17:37:00: constructing knn graph
2019-12-06 17:37:00: calculating geodesic distances
2019-12-06 17:37:00: Classical Scaling
2019-12-06 17:37:00: Isomap START
2019-12-06 17:37:00: constructing knn graph
2019-12-06 17:37:00: calculating geodesic distances
2019-12-06 17:37:01: Classical Scaling
2019-12-06 17:37:01: Isomap START
2019-12-06 17:37:01: constructing knn graph
2019-12-06 17:37:01: calculating geodesic distances
2019-12-06 17:37:01: Classical Scaling
2019-12-06 17:37:01: Isomap START
2019-12-06 17:37:01: constructing knn graph
2019-12-06 17:37:01: calculating geodesic distances
2019-12-06 17:37:01: Classical Scaling
2019-12-06 17:37:01: Isomap START
2019-12-06 17:37:01: constructing knn graph
2019-12-06 17:37:01: calculating geodesic distances
2019-12-06 17:37:02: Classical Scaling
2019-12-06 17:37:02: Isomap START
2019-12-06 17:37:02: constructing knn graph
2019-12-06 17:37:02: calculating geodesic distances
2019-12-06 17:37:02: Classical Scaling
2019-12-06 17:37:02: Isomap START
2019-12-06 17:37:02: constructing knn graph
2019-12-06 17:37:02: calculating geodesic distances
2019-12-06 17:37:02: Classical Scaling
2019-12-06 17:37:02: Isomap START
2019-12-06 17:37:02: constructing knn graph
2019-12-06 17:37:02: calculating geodesic distances
2019-12-06 17:37:03: Classical Scaling
2019-12-06 17:37:03: Isomap START
2019-12-06 17:37:03: constructing knn graph
2019-12-06 17:37:03: calculating geodesic distances
2019-12-06 17:37:03: Classical Scaling
2019-12-06 17:37:03: Isomap START
2019-12-06 17:37:03: constructing knn graph
2019-12-06 17:37:03: calculating geodesic distances
2019-12-06 17:37:04: Classical Scaling
2019-12-06 17:37:04: Isomap START
2019-12-06 17:37:04: constructing knn graph
2019-12-06 17:37:04: calculating geodesic distances
2019-12-06 17:37:04: Classical Scaling
2019-12-06 17:37:04: Isomap START
2019-12-06 17:37:04: constructing knn graph
2019-12-06 17:37:04: calculating geodesic distances
2019-12-06 17:37:04: Classical Scaling
2019-12-06 17:37:04: Isomap START
2019-12-06 17:37:04: constructing knn graph
2019-12-06 17:37:04: calculating geodesic distances
2019-12-06 17:37:05: Classical Scaling
2019-12-06 17:37:05: Isomap START
2019-12-06 17:37:05: constructing knn graph
2019-12-06 17:37:05: calculating geodesic distances
2019-12-06 17:37:05: Classical Scaling
2019-12-06 17:37:05: Isomap START
2019-12-06 17:37:05: constructing knn graph
2019-12-06 17:37:05: calculating geodesic distances
2019-12-06 17:37:06: Classical Scaling
2019-12-06 17:37:06: Isomap START
2019-12-06 17:37:06: constructing knn graph
2019-12-06 17:37:06: calculating geodesic distances
2019-12-06 17:37:06: Classical Scaling
> source("/Users/kaustubh/Documents/Data Science/Project/final/bar1.R")
Performing eigendecomposition
Computing Diffusion Coordinates
Elapsed time: 0.62 seconds
2019-12-06 17:38:29: Constructing Axis 1/2
predictors:  PC1 dependent:  PC2 
sigma=0.001 kernel=rbfdot lambda=0 nblocks=4 ( 53921.54 )
sigma=0.01 kernel=rbfdot lambda=0 nblocks=4 ( 1000.807 )
sigma=0.1 kernel=rbfdot lambda=0 nblocks=4 ( 24286214312 )
sigma=1 kernel=rbfdot lambda=0 nblocks=4 ( 61021960452 )
sigma=10 kernel=rbfdot lambda=0 nblocks=4 ( 5.841192e+14 )
Error in solve(Matrix(K + diag(lambda, N))) : 
  Lapack dgecon(): system computationally singular, reciprocal condition number = 1.94936e-19
In addition: Warning message:
In (function (X, ndim = ncol(X), lambda = c(0, 10^(-3:2)), kernel = "rbfdot",  :
  ndim < data dimensionality, the inverse functions will be incomplete!
sigma=100 kernel=rbfdot lambda=0 nblocks=4 ( NA )
sigma=1000 kernel=rbfdot lambda=0 nblocks=4 ( 5.58344e+12 )
sigma=10000 kernel=rbfdot lambda=0 nblocks=4 ( 15523465 )
sigma=0.001 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.50639 )
sigma=0.01 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.4932063 )
sigma=0.1 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.4457548 )
sigma=1 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.3952382 )
sigma=10 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.3946789 )
sigma=100 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.4167899 )
sigma=1000 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.6444569 )
sigma=10000 kernel=rbfdot lambda=0.001 nblocks=4 ( 0.9184433 )
sigma=0.001 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.5066538 )
sigma=0.01 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.5033764 )
sigma=0.1 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.4738964 )
sigma=1 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.39586 )
sigma=10 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.3938431 )
sigma=100 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.4130325 )
sigma=1000 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.4918574 )
sigma=10000 kernel=rbfdot lambda=0.01 nblocks=4 ( 0.5821145 )
sigma=0.001 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.5068115 )
sigma=0.01 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.5060261 )
sigma=0.1 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.482976 )
sigma=1 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.3970594 )
sigma=10 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.3933208 )
sigma=100 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.4042091 )
sigma=1000 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.4370684 )
sigma=10000 kernel=rbfdot lambda=0.1 nblocks=4 ( 0.4816025 )
sigma=0.001 kernel=rbfdot lambda=1 nblocks=4 ( 0.506681 )
sigma=0.01 kernel=rbfdot lambda=1 nblocks=4 ( 0.5066387 )
sigma=0.1 kernel=rbfdot lambda=1 nblocks=4 ( 0.4917436 )
sigma=1 kernel=rbfdot lambda=1 nblocks=4 ( 0.4022946 )
sigma=10 kernel=rbfdot lambda=1 nblocks=4 ( 0.3935945 )
sigma=100 kernel=rbfdot lambda=1 nblocks=4 ( 0.4002859 )
sigma=1000 kernel=rbfdot lambda=1 nblocks=4 ( 0.4243773 )
sigma=10000 kernel=rbfdot lambda=1 nblocks=4 ( 0.464509 )
sigma=0.001 kernel=rbfdot lambda=10 nblocks=4 ( 0.5065614 )
sigma=0.01 kernel=rbfdot lambda=10 nblocks=4 ( 0.5066604 )
sigma=0.1 kernel=rbfdot lambda=10 nblocks=4 ( 0.5036041 )
sigma=1 kernel=rbfdot lambda=10 nblocks=4 ( 0.4307587 )
sigma=10 kernel=rbfdot lambda=10 nblocks=4 ( 0.4043185 )
sigma=100 kernel=rbfdot lambda=10 nblocks=4 ( 0.4257917 )
sigma=1000 kernel=rbfdot lambda=10 nblocks=4 ( 0.4656666 )
sigma=10000 kernel=rbfdot lambda=10 nblocks=4 ( 0.4906072 )
sigma=0.001 kernel=rbfdot lambda=100 nblocks=4 ( 0.5064429 )
sigma=0.01 kernel=rbfdot lambda=100 nblocks=4 ( 0.5064685 )
sigma=0.1 kernel=rbfdot lambda=100 nblocks=4 ( 0.5060731 )
sigma=1 kernel=rbfdot lambda=100 nblocks=4 ( 0.4804205 )
sigma=10 kernel=rbfdot lambda=100 nblocks=4 ( 0.4667143 )
sigma=100 kernel=rbfdot lambda=100 nblocks=4 ( 0.4872149 )
sigma=1000 kernel=rbfdot lambda=100 nblocks=4 ( 0.4997187 )
sigma=10000 kernel=rbfdot lambda=100 nblocks=4 ( 0.5040984 )
2019-12-06 17:39:42: Constructing Axis 2/2
> 
> 
> 
> 
> 
> source("/Users/kaustubh/Documents/Data Science/Project/final/bar1.R")
2019-12-06 17:39:57: Isomap START
2019-12-06 17:39:57: constructing knn graph
2019-12-06 17:39:57: calculating geodesic distances
2019-12-06 17:40:01: Classical Scaling
2019-12-06 17:40:39: Calculating kernel PCA
2019-12-06 17:40:50: Trying to calculate reverse
2019-12-06 17:40:52: DONE
finding neighbours
calculating weights
computing coordinates
> 
> 
> 
> embed_methods <- c("Isomap", "PCA", "tSNE", "UMAP", "kPCA", "LLE", "MDS")
> quality_methods <- c("Q_local", "Q_global", "AUC_lnK_R_NX",
+ "cophenetic_correlation")
> 
> scurve <- loadDataSet("3D S Curve", n = 2000)
> quality_results <- matrix(
+ NA, length(embed_methods), length(quality_methods),
+ dimnames = list(embed_methods, quality_methods)
+ )
> embedded_data <- list()
> for (e in embed_methods) {
+ embedded_data[[e]] <- embed(scurve, e)
+ for (q in quality_methods)
+ try(quality_results[e, q] <- quality(embedded_data[[e]], q))
+ }
2019-12-06 17:45:53: Isomap START
2019-12-06 17:45:53: constructing knn graph
2019-12-06 17:45:53: calculating geodesic distances
2019-12-06 17:45:57: Classical Scaling
2019-12-06 17:46:36: Calculating kernel PCA
2019-12-06 17:46:47: Trying to calculate reverse
2019-12-06 17:46:49: DONE
finding neighbours
calculating weights
computing coordinates
> embed_methods <- c("Isomap", "PCA", "tSNE", "UMAP", "kPCA", "LLE", "MDS")
> quality_methods <- c("Q_local", "Q_global", "AUC_lnK_R_NX",
+ "cophenetic_correlation")
> 
> scurve <- loadDataSet("3D S Curve", n = 2000)
> quality_results <- matrix(
+ NA, length(embed_methods), length(quality_methods),
+ dimnames = list(embed_methods, quality_methods)
+ )
> embedded_data <- list()
> for (e in embed_methods) {
+ embedded_data[[e]] <- embed(scurve, e)
+ for (q in quality_methods)
+ try(quality_results[e, q] <- quality(embedded_data[[e]], q))
+ }
2019-12-06 17:48:18: Isomap START
2019-12-06 17:48:18: constructing knn graph
2019-12-06 17:48:19: calculating geodesic distances
2019-12-06 17:48:22: Classical Scaling
2019-12-06 17:48:57: Calculating kernel PCA
2019-12-06 17:49:08: Trying to calculate reverse
2019-12-06 17:49:10: DONE
finding neighbours
calculating weights
computing coordinates
> 
> 
> 
>  quality_results 
         Q_local  Q_global AUC_lnK_R_NX cophenetic_correlation
Isomap 0.8694600 0.4092234    0.8095091              0.8696406
PCA    0.5111144 0.3304313    0.3984003              0.9687635
tSNE   0.7892211 0.3369050    0.7420103              0.6474774
UMAP   0.6973265 0.3285808    0.6460847              0.7546982
kPCA   0.5141239 0.3200752    0.4174671              0.9570131
LLE    0.5064607 0.2310097    0.4640707              0.6116996
MDS    0.5111144 0.3304313    0.3984003              0.9687635
> bar()
Error in bar() : could not find function "bar"
> 
> 
> barplot()
Error in barplot.default() : 
  argument "height" is missing, with no default
> 
> 
> barplot(data= quality_results)
Error in barplot.default(data = quality_results) : 
  argument "height" is missing, with no default
> barplot(data=quality_results, height=400)
Warning messages:
1: In plot.window(xlim, ylim, log = log, ...) :
  "data" is not a graphical parameter
2: In title(main = main, sub = sub, xlab = xlab, ylab = ylab, ...) :
  "data" is not a graphical parameter
3: In axis(if (horiz) 1 else 2, cex.axis = cex.axis, ...) :
  "data" is not a graphical parameter
4: In dev.flush() : "data" is not a graphical parameter
5: In dev.flush() : "data" is not a graphical parameter
6: In dev.flush() : "data" is not a graphical parameter
> 
> 
> barplot(quality_results, beside = TRUE,
+         col = c("Q_local", "Q_global", "AUC_lnK_R_NX",
+                 "cophenetic_correlation"),
+         legend = rownames(quality_results), ylim = c(0., 1.))
Error in rect(y1, x1, y2, x2, ...) : invalid color name 'Q_local'
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> barplot(quality_results, beside = TRUE,
+         legend = rownames(quality_results), ylim = c(0., 1.))
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> barplot(quality_results, beside = TRUE,
+         legend = rownames(quality_results), ylim = c(0., 1.), horiz=FALSE)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> barplot(quality_results, beside = TRUE,
+         legend = colnames(quality_results), ylim = c(0., 1.), horiz=FALSE)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> 
> 
> barplot(quality_results.T, beside = TRUE,
+         legend = colnames(quality_results), ylim = c(0., 1.), horiz=FALSE)
Error in barplot(quality_results.T, beside = TRUE, legend = colnames(quality_results),  : 
  object 'quality_results.T' not found
> title(main = "Death Rates in Virginia", font.main = 4)
Error in title(main = "Death Rates in Virginia", font.main = 4) : 
  plot.new has not been called yet
> typeof(quality_results.T)
Error in typeof(quality_results.T) : object 'quality_results.T' not found
> typeof(quality_results)
[1] "double"
> 
> 
> t{quality_results}
Error: unexpected '{' in "t{"
> t(quality_results)
                          Isomap       PCA      tSNE      UMAP      kPCA       LLE       MDS
Q_local                0.8694600 0.5111144 0.7892211 0.6973265 0.5141239 0.5064607 0.5111144
Q_global               0.4092234 0.3304313 0.3369050 0.3285808 0.3200752 0.2310097 0.3304313
AUC_lnK_R_NX           0.8095091 0.3984003 0.7420103 0.6460847 0.4174671 0.4640707 0.3984003
cophenetic_correlation 0.8696406 0.9687635 0.6474774 0.7546982 0.9570131 0.6116996 0.9687635
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), ylim = c(0., 1.), horiz=FALSE)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), ylim = c(0., 1.), horiz=TRUE)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> barplot(quality_results, beside = TRUE,
+         legend = colnames(quality_results), ylim = c(0., 1.), horiz=FALSE)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> 
> barplot(quality_results, beside = TRUE,
+         legend = colnames(quality_results), ylim = c(0., 1.), horiz=FALSE, las=1)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> 
> 
> barplot(quality_results, beside = TRUE,
+         legend = rownames(quality_results), ylim = c(0., 1.), horiz=FALSE, las=1)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), ylim = c(0., 1.), horiz=FALSE, las=1)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=FALSE, las=1)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), ylim = c(0., 1.), horiz=TRUE, las=1)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=1)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.5)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4)
> 
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) legend("topright", 
Error: unexpected symbol in "title(main = "Death Rates in Virginia", font.main = 4) legend"
>        legend = c("a", "b", "c", "d", "e", "f"), 
Error: unexpected ',' in "       legend = c("a", "b", "c", "d", "e", "f"),"
>        fill = 1:6, ncol = 2,
Error: unexpected ',' in "       fill = 1:6,"
>        cex = 0.75)
Error: unexpected ')' in "       cex = 0.75)"
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) legend("topright", 
Error: unexpected symbol in "title(main = "Death Rates in Virginia", font.main = 4) legend"
>        legend = c("a", "b", "c", "d", "e", "f"), 
Error: unexpected ',' in "       legend = c("a", "b", "c", "d", "e", "f"),"
>        fill = 1:6, ncol = 2,
Error: unexpected ',' in "       fill = 1:6,"
>        cex = 0.75)
Error: unexpected ')' in "       cex = 0.75)"
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) legend("topright", 
Error: unexpected symbol in "title(main = "Death Rates in Virginia", font.main = 4) legend"
>        legend = c("a", "b", "c", "d", "e", "f"), 
Error: unexpected ',' in "       legend = c("a", "b", "c", "d", "e", "f"),"
>        fill = 1:6, ncol = 2,
Error: unexpected ',' in "       fill = 1:6,"
>        cex = 0.75)
Error: unexpected ')' in "       cex = 0.75)"
> 
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) legend("topright", 
Error: unexpected symbol in "title(main = "Death Rates in Virginia", font.main = 4) legend"
>        legend = c("a", "b", "c", "d", "e", "f"), 
Error: unexpected ',' in "       legend = c("a", "b", "c", "d", "e", "f"),"
>        fill = 1:6, ncol = 2,
Error: unexpected ',' in "       fill = 1:6,"
>        cex = 0.75)
Error: unexpected ')' in "       cex = 0.75)"
> 
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) 
> legend("topright", 
+        legend = c("a", "b", "c", "d", "e", "f"), 
+        fill = 1:6, ncol = 2, cex = 0.75)
> 
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         legend = colnames(quality_results), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) 
> legend("topright", 
+        legend = colnames(quality_results),
+        fill = 1:6, ncol = 1, cex = 0.75)
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) 
> legend("topright", 
+        legend = colnames(quality_results),
+        fill = 1:6, ncol = 1, cex = 0.75)
> 
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         , col = 1:6, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) 
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = 1:6, ncol = 2, cex = 0.75)
> barplot(t(quality_results), beside = TRUE,
+         , col = 1:6, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) 
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = 1:6, ncol = 1, cex = 0.75)
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         , col = 1:4, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) 
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = 1:6, ncol = 1, cex = 0.75)
> 
> 
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         , col = c(1,3,4,5), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> title(main = "Death Rates in Virginia", font.main = 4) 
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = c(1,3,4,5), ncol = 1, cex = 0.75)
> barplot(t(quality_results), beside = TRUE,
+         , col = c(1,3,4,5), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = c(1,3,4,5), ncol = 1, cex = 0.75)
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         , col = c(1,3,4,5), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = c(1,3,4,5), ncol = 1, cex = 0.75)
> barplot(t(quality_results), beside = TRUE,
+         , col = c(1,3,4,5), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = c(1,3,4,5), ncol = 1, cex = 1.)
> 
> 
> barplot(t(quality_results), beside = TRUE,
+         , col = c(6,3,4,5), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = c(6,3,4,5), ncol = 1, cex = 1.)
> barplot(t(quality_results), beside = TRUE,
+         , col = c(7,3,4,5), xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = c(7,3,4,5), ncol = 1, cex = 1.)
> 
> 
> cs = c(8,3,4,5)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1.)
> 
> 
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1.)
> 
> 
> 
> 
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, yex = 1.)
Error in legend("topright", legend = colnames(quality_results), fill = cs,  : 
  unused argument (yex = 1)
> 
> 
> 
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topleft", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1.)
> 
> 
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topleft", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., bg=1)
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topleft", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., bg=0)
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topleft", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., bg=9)
> 
> 
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topleft", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., bg="F")
Error in rect(left, top, r, b, angle = angle, density = density, ...) : 
  invalid color name 'F'
> 
> 
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topleft", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., bg=15)
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topleft", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., bg=16)
> 
> 
> 
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topleft", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1.
+ cs = c(3,4,5,8)
Error: unexpected symbol in:
"       fill = cs, ncol = 1, cex = 1.
cs"
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1.)
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1.)
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., y =0.7)
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., y =7)
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", 
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., y =7, bg = "gray90")
> 
> 
> 
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", x=1.5,y=1.,
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., y =7, bg = "gray90")
Error in legend("topright", x = 1.5, y = 1, legend = colnames(quality_results),  : 
  formal argument "y" matched by multiple actual arguments
> cs = c(3,4,5,8)
> barplot(t(quality_results), beside = TRUE,
+         , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
> legend("topright", x=1.5,y=1.,
+        legend = colnames(quality_results), 
+        fill = cs, ncol = 1, cex = 1., bg = "gray90")
> 
> 
> 
> 
> cs = c(3,4,5,8)
barplot(t(quality_results), beside = TRUE,
        , col = cs, xlim = c(0., 1.), horiz=TRUE, las=1, width=0.1, border = NA)
legend("topright", x=1.5,y=100.,
       legend = colnames(quality_results), 
       fill = cs, ncol = 1, cex = 1., bg = "gray90")